# -*- coding: utf-8 -*-
"""ibin_dataloader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5DESbmqro1QynaZI9zBTvxtTPHR2F3A
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

import cv2
import imp
import numpy as np
import os         
from random import shuffle 
from tqdm import tqdm
import skimage as sk
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import tensorflow as tf
from tensorflow.keras.utils import to_categorical

# !unzip "drive/My Drive/TreeClassification/train.zip"

# !unzip "drive/My Drive/TreeClassification/test.zip"

# Path of plant images for training
TRAIN_DIR = "train"
TEST_DIR = "test"

# Input Image Size
IMG_SIZE = 28

plant_species = ['Ashoka1', 'Camellia', 'Chirstmas tree', 'Cycas revoluta', 'Guava', 'Jarul', 'Laurel Magnolia',
                 'Litchi', 'Madanmast', 'Mango', 'Mehndi', 'Rose', 'Rubbertree', 'Silver oak']

num_classes = len(plant_species)
print('No of species to be classified = ', num_classes)

species_list = sorted(plant_species)
print('List of Species = \n', species_list)

# Horizontal Flip
def horizontal_flip(img_data):
	im_hFlip = np.fliplr(img_data)
	return im_hFlip

# Vertical Flip
def vertical_flip(img_data):
	im_vFlip = np.flipud(img_data)
	return im_vFlip

# Image Rotation (90 deg anti-clockwise)
def rotate_90(img_data):
	im_Rot90 = np.rot90(img_data, k=1, axes=(0,1))
	return im_Rot90

def create_label(img):
    print (img)
    word_label = img.split('(')[0]
    # conversion to one-hot array [cat,dog]
    #                            [much cat, no dog]
    if word_label == 'Ashoka1': return [1,0,0,0,0,0,0,0,0,0,0,0,0,0]
    #                             [no cat, very doggo]
    elif word_label == 'Camellia': return [0,1,0,0,0,0,0,0,0,0,0,0,0,0]
    elif word_label == 'Chirstmas tree': return [0,0,1,0,0,0,0,0,0,0,0,0,0,0]
    elif word_label == 'Cycas revoluta': return [0,0,0,1,0,0,0,0,0,0,0,0,0,0]
    elif word_label == 'Guava': return [0,0,0,0,1,0,0,0,0,0,0,0,0,0]
    elif word_label == 'Jarul': return [0,0,0,0,0,1,0,0,0,0,0,0,0,0]
    elif word_label == 'Laurel Magnolia': return [0,0,0,0,0,0,1,0,0,0,0,0,0,0]
    elif word_label == 'Litchi': return [0,0,0,0,0,0,0,1,0,0,0,0,0,0]
    elif word_label == 'Madanmast': return [0,0,0,0,0,0,0,0,1,0,0,0,0,0]
    elif word_label == 'Mango': return [0,0,0,0,0,0,0,0,0,1,0,0,0,0]
    elif word_label == 'Mehndi': return [0,0,0,0,0,0,0,0,0,0,1,0,0,0]
    elif word_label == 'Rose': return [0,0,0,0,0,0,0,0,0,0,0,1,0,0]
    elif word_label == 'Rubbertree': return [0,0,0,0,0,0,0,0,0,0,0,0,1,0]
    elif word_label == 'Silver oak': return [0,0,0,0,0,0,0,0,0,0,0,0,0,1]

# Image Rotation (90 def clockwise)
def rotate_270(img_data):
	im_Rot270 = np.rot90(img_data, k=3, axes=(0,1))
	return im_Rot270

# Random Noise
def rand_noise(img_data):
	im_randNoise = sk.util.random_noise(img_data)
	return im_randNoise

# Method to create training data
def create_train_data():
	training_data = []
	for img in tqdm(os.listdir(TRAIN_DIR)):
		path = os.path.join(TRAIN_DIR, img)
		img_data = cv2.imread(path)
		img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))

		# Image Augmentation
		img_data_hFlip = horizontal_flip(img_data)
		img_data_vFlip = vertical_flip(img_data)
		img_data_Rot90 = rotate_90(img_data)
		img_data_Rot270 = rotate_270(img_data)
		img_data_RandNoise = rand_noise(img_data)

		img_label = create_label(img)
		training_data.append([np.array(img_data), img_label])
		training_data.append([np.array(img_data_hFlip), img_label])
		training_data.append([np.array(img_data_vFlip), img_label])
		training_data.append([np.array(img_data_Rot90), img_label])
		training_data.append([np.array(img_data_Rot270), img_label])
		training_data.append([np.array(img_data_RandNoise), img_label])
    
	shuffle(training_data)
	return training_data

# Method to create testing data
def create_test_data():
	testing_data = []
	for img in tqdm(os.listdir(TEST_DIR)):
		path = os.path.join(TEST_DIR, img)
		img_data = cv2.imread(path)
		img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))
		img_label = create_label(img)
		testing_data.append([np.array(img_data), img_label])
	shuffle(testing_data)
	return testing_data

# Create training data
train_data = create_train_data()

# Unroll training set data in vector form
x_train = np.array([i[0] for i in train_data]).reshape(-1, IMG_SIZE, IMG_SIZE, 3)
print('Train_X = ', type(x_train), x_train.shape)

# Training labels
y_train = np.array([i[1] for i in train_data])
print('Train_Y = ', type(y_train), y_train.shape)

# Create testing data
test_data = create_test_data()

# Unroll testing set data in vector form
x_test = np.array([i[0] for i in test_data]).reshape(-1, IMG_SIZE, IMG_SIZE, 3)
print('Test_X = ', type(x_test), x_test.shape)

# Testing labels
y_test = np.array([i[1] for i in test_data])
print('Test_Y = ', type(y_test), y_test.shape)

